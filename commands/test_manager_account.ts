import { BaseCommand } from '@adonisjs/core/ace'\nimport type { CommandOptions } from '@adonisjs/core/types/ace'\nimport ConnectedAccount from '#models/connected_account'\nimport googleAdsService from '#services/google_ads_service'\nimport logger from '@adonisjs/core/services/logger'\n\nexport default class TestManagerAccount extends BaseCommand {\n  static commandName = 'test:manager-account'\n  static description = 'Test manager account detection and syncing'\n\n  static options: CommandOptions = {\n    startApp: true,\n    allowUnknownFlags: false,\n    staysAlive: false,\n  }\n\n  async run() {\n    try {\n      this.logger.info('Testing manager account functionality...')\n\n      // Get all connected accounts\n      const accounts = await ConnectedAccount.query()\n        .where('platform', 'google_ads')\n        .where('is_active', true)\n\n      if (accounts.length === 0) {\n        this.logger.error('No Google Ads accounts found')\n        return\n      }\n\n      for (const account of accounts) {\n        this.logger.info(`Testing account: ${account.accountId} (${account.accountName})`)\n\n        try {\n          // Check if it's a manager account\n          const isManager = await googleAdsService.isManagerAccount(account.id, account.userId)\n          this.logger.info(`Account ${account.accountId} is manager: ${isManager}`)\n\n          if (isManager) {\n            // Test getting child accounts\n            const childAccounts = await googleAdsService.getChildAccounts(account.id, account.userId)\n            this.logger.info(`Found ${childAccounts.length} child accounts:`)\n            \n            for (const child of childAccounts) {\n              this.logger.info(`  - ${child.customer_client?.id}: ${child.customer_client?.descriptive_name}`)\n            }\n\n            // Test syncing campaign data for manager account\n            this.logger.info('Testing campaign data sync for manager account...')\n            const campaignData = await googleAdsService.getEnrichedCampaignData(\n              account.id,\n              account.userId,\n              { type: 'last_7_days' }\n            )\n            this.logger.info(`Synced ${campaignData.length} campaign data records`)\n          } else {\n            // Test syncing campaign data for regular account\n            this.logger.info('Testing campaign data sync for regular account...')\n            const campaignData = await googleAdsService.getEnrichedCampaignData(\n              account.id,\n              account.userId,\n              { type: 'last_7_days' }\n            )\n            this.logger.info(`Synced ${campaignData.length} campaign data records`)\n          }\n        } catch (error: any) {\n          this.logger.error(`Error testing account ${account.accountId}:`, error.message)\n        }\n      }\n\n      this.logger.success('Manager account testing completed')\n    } catch (error: any) {\n      this.logger.error('Test failed:', error.message)\n    }\n  }\n}\n