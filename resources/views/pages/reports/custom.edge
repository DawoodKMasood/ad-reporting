@layout.app({ title: 'Custom Report Builder' })

  @slot('main')
    <!-- Main Content -->
    <div class="max-w-7xl mx-auto py-6">
      <!-- Page Header -->
      <a
        href="{{ route('reports.index') }}"
        class="inline-flex items-center text-blue-600 hover:text-blue-800 mb-4"
      >
        <i class="fas fa-arrow-left mr-1"></i>
        Back to Reports
    </a>
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <div class="flex items-center">
              <h1 class="text-3xl font-bold text-gray-900">
                <i class="fas fa-chart-pie mr-3 text-purple-600"></i>
                Custom Report Builder
              </h1>
            </div>
            <p class="mt-2 text-gray-600">
              Drag and drop widgets to create custom reports with advanced filtering
            </p>
          </div>

          <!-- Report Actions -->
          <div class="flex items-center space-x-3">
            <button
              id="saveReportBtn"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onclick="handleSaveClick()"
            >
              <i class="fas fa-save mr-2"></i>
              Save Report
          </button>

          </div>
        </div>
      </div>

      @if(connectedAccounts && connectedAccounts.length > 0)
        <!-- Account Selection -->
        <div class="mb-8">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">
              <i class="fas fa-user-circle mr-2 text-purple-600"></i>
              Select Account <span class="text-red-500">*</span>
            </h2>
            <p class="text-sm text-gray-600 mb-4">
              Choose the account you want to create this report for:
            </p>

            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4" id="accountSelection">
              @each(account in connectedAccounts)
                <div
                  class="account-option cursor-pointer flex items-center p-4 border-2 border-gray-200 rounded-lg hover:border-green-600 transition-all duration-200"
                  data-account-id="{{ account.id }}"
                  data-account-name="{{ account.accountDisplayName }}"
                  data-platform="{{ account.platform }}"
                  onclick="selectAccount(this)"
                >
                  <div class="flex-shrink-0">
                    @!component('components/platform-logo', {
                    platform: account.platform,
                    size: 'sm'
                    })
                  </div>
                  <div class="ml-3 flex-1">
                    <h3 class="text-sm font-medium text-gray-900">
                      {{ account.accountDisplayName }}
                    </h3>
                    <p class="text-xs text-gray-500">
                      {{ account.platform === 'google_ads' ? 'Google Ads' : account.platform === 'meta_ads' ? 'Meta Ads' : account.platform === 'tiktok_ads' ? 'TikTok Ads' : account.platform.replace('_', ' ') }}
                    </p>
                  </div>
                  <div class="flex-shrink-0">
                    @if(account.isActive)
                      <span
                        class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                      >
                        <i class="fas fa-check-circle mr-1"></i>
                        Active
                    </span>
                    @else
                      <span
                        class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"
                      >
                        <i class="fas fa-exclamation-circle mr-1"></i>
                        Inactive
                    </span>
                    @end
                  </div>
                </div>
              @end
            </div>

            <div id="accountRequiredError" class="mt-2 text-sm text-red-600 hidden">
              <i class="fas fa-exclamation-circle mr-1"></i>
              Please select an account before saving or previewing the report.
            </div>
          </div>
        </div>

        <!-- Report Builder Interface -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Widget Library Sidebar -->
          <div class="lg:col-span-1">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-puzzle-piece mr-2 text-purple-600"></i>
                Widget Library
              </h3>

              <!-- Widget Categories -->
              <div class="space-y-4">
                <!-- Metrics Widgets -->
                <div>
                  <h4 class="text-sm font-medium text-gray-700 mb-2 uppercase tracking-wide">
                    Metrics
                  </h4>
                  <div id="metricWidgets" class="space-y-2">
                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "spend", "title": "Total Spend", "icon": "fa-dollar-sign", "color": "green"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-dollar-sign text-green-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Total Spend</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "impressions", "title": "Impressions", "icon": "fa-eye", "color": "blue"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-eye text-blue-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Impressions</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "clicks", "title": "Clicks", "icon": "fa-mouse-pointer", "color": "purple"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-mouse-pointer text-purple-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Clicks</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "conversions", "title": "Conversions", "icon": "fa-trophy", "color": "orange"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-trophy text-orange-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Conversions</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "ctr", "title": "Click-Through Rate", "icon": "fa-percentage", "color": "indigo"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-percentage text-indigo-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Click-Through Rate</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="metric"
                      data-widget-config='{"type": "cpc", "title": "Cost Per Click", "icon": "fa-hand-pointer", "color": "red"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-hand-pointer text-red-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Cost Per Click</span>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Chart Widgets -->
                <div>
                  <h4 class="text-sm font-medium text-gray-700 mb-2 uppercase tracking-wide">
                    Charts
                  </h4>
                  <div id="chartWidgets" class="space-y-2">
                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="chart"
                      data-widget-config='{"type": "line", "title": "Performance Over Time", "icon": "fa-chart-line"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-chart-line text-blue-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Line Chart</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="chart"
                      data-widget-config='{"type": "bar", "title": "Platform Comparison", "icon": "fa-chart-bar"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-chart-bar text-green-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Bar Chart</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="chart"
                      data-widget-config='{"type": "pie", "title": "Spend Distribution", "icon": "fa-chart-pie"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-chart-pie text-purple-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Pie Chart</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="chart"
                      data-widget-config='{"type": "area", "title": "Trend Analysis", "icon": "fa-chart-area"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-chart-area text-orange-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Area Chart</span>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Table Widgets -->
                <div>
                  <h4 class="text-sm font-medium text-gray-700 mb-2 uppercase tracking-wide">
                    Tables
                  </h4>
                  <div id="tableWidgets" class="space-y-2">
                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="table"
                      data-widget-config='{"type": "campaign", "title": "Campaign Performance", "icon": "fa-table"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-table text-gray-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Campaign Table</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="table"
                      data-widget-config='{"type": "adgroup", "title": "Ad Group Performance", "icon": "fa-list"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-list text-blue-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Ad Group Table</span>
                      </div>
                    </div>

                    <div
                      class="widget-source cursor-move p-3 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-blue-300"
                      data-widget-type="table"
                      data-widget-config='{"type": "keyword", "title": "Keyword Performance", "icon": "fa-key"}'
                      draggable="true"
                      ondragstart="handleDragStart(event, this)"
                      ondragend="handleDragEnd(event, this)"
                    >
                      <div class="flex items-center">
                        <i class="fas fa-key text-green-600 mr-2"></i>
                        <span class="text-sm text-gray-900">Keyword Table</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Report Canvas -->
          <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-900">
                  <i class="fas fa-layout mr-2 text-purple-600"></i>
                  Report Canvas
                </h3>
                <div class="flex items-center space-x-2">
                  <button
                    id="clearCanvasBtn"
                    class="px-3 py-1 text-xs font-medium bg-red-100 text-red-800 rounded-md hover:bg-red-200"
                    onclick="clearCanvas()"
                  >
                    <i class="fas fa-trash mr-1"></i>
                    Clear All
                </button>
                </div>
              </div>

              <!-- Canvas Area -->
              <div
                id="reportCanvas"
                class="min-h-96 border-2 border-dashed border-gray-300 rounded-lg p-6 bg-gray-50"
                ondragover="handleDragOver(event)"
                ondragleave="handleDragLeave(event)"
                ondrop="handleDrop(event)"
              >
                <div id="emptyState" class="text-center py-12">
                  <i class="fas fa-mouse-pointer text-4xl text-gray-400 mb-4"></i>
                  <h4 class="text-lg font-medium text-gray-600 mb-2">
                    Drag widgets here to build your report
                  </h4>
                  <p class="text-gray-500">
                    Start by dragging metrics, charts, or tables from the widget library
                  </p>
                </div>

                <!-- Dynamic Widget Container -->
                <div id="widgetContainer" class="hidden space-y-6">
                </div>
              </div>

              <div id="canvasRequiredError" class="mt-2 text-sm text-red-600 hidden">
                <i class="fas fa-exclamation-circle mr-1"></i>
                Please add at least one widget to the canvas before saving or previewing the report.
              </div>
            </div>
          </div>
        </div>
      @else
        <!-- No Data State -->
        <div class="text-center py-12">
          <div class="max-w-md mx-auto">
            <i class="fas fa-chart-pie text-6xl text-gray-300 mb-6"></i>
            <h3 class="text-lg font-medium text-gray-900 mb-2">
              No Connected Accounts
            </h3>
            <p class="text-gray-500 mb-6">
              Connect your advertising accounts to start building custom reports.
            </p>
            <a
              href="{{ route('integrations.index') }}"
              class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700"
            >
              <i class="fas fa-plug mr-2"></i>
              Connect Your First Account
          </a>
          </div>
        </div>
      @endif
    </div>

    <!-- Page-specific JavaScript -->
    <script>
      // Global state
      let selectedAccountId = null;
      
      let selectedAccountData = null;
      
      let widgetCounter = 0;
      
      let draggedData = null;
      // Account selection
      
      function selectAccount(element) {
        console.log("Selecting account:", element.dataset.accountId);
        // Clear all selections
        document.querySelectorAll(".account-option").forEach(opt => {
          opt.classList.remove("border-blue-500");
          opt.classList.add("border-gray-200");
        });
        // Select this one
        element.classList.remove("border-gray-200");
        element.classList.add("border-blue-500");
        // Store selection
        selectedAccountId = element.dataset.accountId;
        selectedAccountData = {
          id: element.dataset.accountId,
          name: element.dataset.accountName,
          platform: element.dataset.platform
        };
        // Hide error
        document.getElementById("accountRequiredError").classList.add("hidden");
      }
      // Drag and drop handlers
      
      function handleDragStart(event, element) {
        console.log("Drag start");
        draggedData = {
          type: element.dataset.widgetType,
          config: JSON.parse(element.dataset.widgetConfig || "{}")
        };
        event.dataTransfer.effectAllowed = "copy";
        event.dataTransfer.setData("text/plain", JSON.stringify(draggedData));
        element.style.opacity = "0.5";
      }
      
      function handleDragEnd(event, element) {
        element.style.opacity = "1";
      }
      
      function handleDragOver(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = "copy";
        document.getElementById("reportCanvas").classList.add("border-green-600", "bg-green-50");
      }
      
      function handleDragLeave(event) {
        if (event.target.id === "reportCanvas") {
          document.getElementById("reportCanvas").classList.remove("border-green-600", "bg-green-50");
        }
      }
      
      function handleDrop(event) {
        event.preventDefault();
        console.log("Drop event");
        document.getElementById("reportCanvas").classList.remove("border-green-600", "bg-green-50");
        try {
          const data = JSON.parse(event.dataTransfer.getData("text/plain"));
          addWidget(data);
        } catch (err) {
          console.error("Drop error:", err);
        }
      }
      // Add widget to canvas
      
      function addWidget(data) {
        console.log("Adding widget:", data);
        widgetCounter++;
        const id = "widget-" + widgetCounter;
        let html = "";
        if (data.type === "metric") {
          html = createMetricWidget(id, data.config);
        } else if (data.type === "chart") {
          html = createChartWidget(id, data.config);
        } else if (data.type === "table") {
          html = createTableWidget(id, data.config);
        }
        if (html) {
          // Hide empty state
          document.getElementById("emptyState").style.display = "none";
          // Show container and add widget
          const container = document.getElementById("widgetContainer");
          container.classList.remove("hidden");
          container.insertAdjacentHTML("beforeend", html);
          // Hide error
          document.getElementById("canvasRequiredError").classList.add("hidden");
        }
      }
      // Widget creators
      
      function createMetricWidget(id, config) {
        const descriptions = {
          spend: "Shows the total amount spent on advertising campaigns",
          impressions: "Displays the total number of times your ads were shown",
          clicks: "Shows the total number of clicks on your advertisements",
          conversions: "Displays the total number of desired actions completed",
          ctr: "Shows the click-through rate as a percentage of impressions",
          cpc: "Displays the average cost per click across campaigns"
        };
        return `
              <div id="${id}" class="widget-item bg-white border rounded-lg p-4 relative group" data-widget-type="metric" data-widget-config='${JSON.stringify(config)}'>
                <button onclick="removeWidget('${id}')" class="absolute top-2 right-2 w-6 h-6 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center rounded-full hover:bg-red-100" title="Remove widget">×</button>
                <div>
                  <h4 class="text-lg font-semibold text-gray-900 mb-2">${config.title}</h4>
                  <p class="text-sm text-gray-600">${descriptions[config.type] || "Metric widget for tracking performance"}</p>
                </div>
              </div>
            `;
      }
      
      function createChartWidget(id, config) {
        const descriptions = {
          line: "Displays performance trends over time with a line chart visualization",
          bar: "Shows comparative data across different platforms or categories using bar charts",
          pie: "Shows the distribution of spending or other metrics as proportional segments",
          area: "Displays trend data with filled areas to show volume and changes over time"
        };
        return `
              <div id="${id}" class="widget-item bg-white border rounded-lg p-4 relative group" data-widget-type="chart" data-widget-config='${JSON.stringify(config)}'>
                <button onclick="removeWidget('${id}')" class="absolute top-2 right-2 w-6 h-6 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center rounded-full hover:bg-red-100" title="Remove widget">×</button>
                <div>
                  <h4 class="text-lg font-semibold text-gray-900 mb-2">${config.title}</h4>
                  <p class="text-sm text-gray-600">${descriptions[config.type] || "Chart widget for data visualization"}</p>
                </div>
              </div>
            `;
      }
      
      function createTableWidget(id, config) {
        const descriptions = {
          campaign: "Displays detailed campaign performance data in a tabular format",
          adgroup: "Shows ad group level metrics and performance data",
          keyword: "Displays keyword-level performance data and statistics"
        };
        return `
              <div id="${id}" class="widget-item bg-white border rounded-lg p-4 relative group" data-widget-type="table" data-widget-config='${JSON.stringify(config)}'>
                <button onclick="removeWidget('${id}')" class="absolute top-2 right-2 w-6 h-6 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center rounded-full hover:bg-red-100" title="Remove widget">×</button>
                <div>
                  <h4 class="text-lg font-semibold text-gray-900 mb-2">${config.title}</h4>
                  <p class="text-sm text-gray-600">${descriptions[config.type] || "Table widget for displaying structured data"}</p>
                </div>
              </div>
            `;
      }
      // Remove widget
      
      function removeWidget(id) {
        const el = document.getElementById(id);
        if (el) el.remove();
        // Check if empty
        const container = document.getElementById("widgetContainer");
        if (container.children.length === 0) {
          container.classList.add("hidden");
          document.getElementById("emptyState").style.display = "block";
        }
      }
      // Clear canvas
      
      function clearCanvas() {
        if (!confirm("Clear all widgets?")) return;
        document.getElementById("widgetContainer").innerHTML = "";
        document.getElementById("widgetContainer").classList.add("hidden");
        document.getElementById("emptyState").style.display = "block";
        widgetCounter = 0;
      }
      // Button handlers
      
      function handleSaveClick() {
        console.log("Save clicked");
        if (!validate()) return;
        // Prompt for report name
        const reportName = prompt("Enter a name for your report:", `Custom Report ${new Date().toLocaleDateString()}`);
        if (!reportName) {
          showNotification("Report name is required", "warning");
          return;
        }
        const widgets = getWidgets();
        const data = {
          name: reportName.trim(),
          description: "",
          // Can be added later if needed
          connectedAccountId: parseInt(selectedAccountId),
          widgetLayout: widgets,
          platform: selectedAccountData ? selectedAccountData.platform : "google_ads"
        };
        console.log("Saving report directly:", data);
        // Show loading state on button
        const saveBtn = document.getElementById("saveReportBtn");
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';
        saveBtn.disabled = true;
        // Send to server
        fetch("/reports/save-layout-debug", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || ""
          },
          body: JSON.stringify(data)
        }).then(res => {
          console.log("Response status:", res.status);
          if (!res.ok) {
            throw new Error(`HTTP ${res.status}`);
          }
          return res.json();
        }).then(result => {
          console.log("Save result:", result);
          if (result.success) {
            showNotification("Report saved successfully!", "success");
            // Redirect to the report page
            if (result.redirect) {
              setTimeout(() => {
                window.location.href = result.redirect;
              }, 1e3);
            } else {
              setTimeout(() => {
                window.location.href = "/reports";
              }, 1e3);
            }
          } else {
            let errorMessage = "Error: " + (result.error || "Unknown error");
            if (result.details) {
              console.error("Validation details:", result.details);
              if (Array.isArray(result.details)) {
                const fieldErrors = result.details.map(detail => detail.field + ": " + detail.message).join(", ");
                errorMessage += " - " + fieldErrors;
              }
            }
            showNotification(errorMessage, "error");
          }
        }).catch(err => {
          console.error("Save error:", err);
          showNotification("Failed to save: " + err.message, "error");
        }).finally(() => {
          // Restore button state
          saveBtn.innerHTML = originalText;
          saveBtn.disabled = false;
        });
      }
      // Validation
      
      function validate() {
        let valid = true;
        let errorMessages = [];
        if (!selectedAccountId) {
          document.getElementById("accountRequiredError").classList.remove("hidden");
          errorMessages.push("Please select an account");
          valid = false;
        } else {
          document.getElementById("accountRequiredError").classList.add("hidden");
        }
        if (getWidgets().length === 0) {
          document.getElementById("canvasRequiredError").classList.remove("hidden");
          errorMessages.push("Please add at least one widget");
          valid = false;
        } else {
          document.getElementById("canvasRequiredError").classList.add("hidden");
        }
        if (!valid && errorMessages.length > 0) {
          showNotification(errorMessages.join(" and ") + " before saving", "warning");
        }
        return valid;
      }
      // Get all widgets
      
      function getWidgets() {
        const widgets = [];
        document.querySelectorAll("#widgetContainer .widget-item").forEach((el, i) => {
          widgets.push({
            id: el.id,
            type: el.dataset.widgetType,
            config: JSON.parse(el.dataset.widgetConfig || "{}"),
            order: i
          });
        });
        return widgets;
      }
      // Show notification
      
      function showNotification(msg, type) {
        console.log("[" + type + "] " + msg);
        // Remove old notifications
        const old = document.querySelector(".notification-toast");
        if (old) old.remove();
        const colors = {
          success: "bg-green-500 text-white border-green-600",
          error: "bg-red-500 text-white border-red-600",
          warning: "bg-yellow-500 text-white border-yellow-600",
          info: "bg-blue-500 text-white border-blue-600"
        };
        const div = document.createElement("div");
        div.className = "notification-toast fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg border-2 z-50 max-w-sm " + (colors[type] || colors.info);
        div.innerHTML = `
              <div class="flex items-center">
                <i class="fas ${type === "success" ? "fa-check-circle" : type === "error" ? "fa-exclamation-circle" : type === "warning" ? "fa-exclamation-triangle" : "fa-info-circle"} mr-2"></i>
                <span class="font-medium">${msg}</span>
              </div>
            `;
        document.body.appendChild(div);
        // Auto-remove after 5 seconds
        setTimeout(() => {
          if (div.parentNode) {
            div.style.transition = "opacity 0.5s ease-out, transform 0.5s ease-out";
            div.style.opacity = "0";
            div.style.transform = "translateX(100%)";
            setTimeout(() => div.remove(), 500);
          }
        }, 5e3);
      }
      // Auto-select first account if only one
      
      window.addEventListener("load", function() {
        const accounts = document.querySelectorAll(".account-option");
        if (accounts.length === 1) {
          selectAccount(accounts[0]);
        }
      });
    </script>
  @endslot
@end
