@layout.app({ title: 'Multi-Account Testing' })\n\n@slot('main')\n  <div class=\"max-w-7xl mx-auto py-6\" x-data=\"multiAccountTest()\" x-init=\"init()\">\n    <!-- Page Header -->\n    <div class=\"mb-8\">\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <h1 class=\"text-3xl font-bold text-gray-900\">\n            <i class=\"fas fa-flask mr-2 text-blue-600\"></i>\n            Multi-Account Testing\n          </h1>\n          <p class=\"mt-2 text-gray-600\">\n            Debug and test multiple Google Ads account functionality\n          </p>\n        </div>\n        <div class=\"bg-yellow-100 border border-yellow-400 text-yellow-800 px-4 py-2 rounded-lg\">\n          <i class=\"fas fa-exclamation-triangle mr-2\"></i>\n          Development Only\n        </div>\n      </div>\n    </div>\n\n    <!-- Test Actions -->\n    <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n      <button \n        @click=\"testConnections()\"\n        :disabled=\"loading\"\n        class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:bg-gray-50 disabled:opacity-50 transition-colors\"\n      >\n        <div class=\"text-center\">\n          <i class=\"fas fa-plug text-2xl text-blue-600 mb-4\" :class=\"{ 'fa-spin': loading }\"></i>\n          <h3 class=\"text-lg font-medium text-gray-900 mb-2\">Test Connections</h3>\n          <p class=\"text-sm text-gray-600\">Test API connectivity for all connected accounts</p>\n        </div>\n      </button>\n      \n      <button \n        @click=\"loadAccountInfo()\"\n        :disabled=\"loading\"\n        class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:bg-gray-50 disabled:opacity-50 transition-colors\"\n      >\n        <div class=\"text-center\">\n          <i class=\"fas fa-info-circle text-2xl text-green-600 mb-4\" :class=\"{ 'fa-spin': loading }\"></i>\n          <h3 class=\"text-lg font-medium text-gray-900 mb-2\">Account Info</h3>\n          <p class=\"text-sm text-gray-600\">View detailed account information and metadata</p>\n        </div>\n      </button>\n      \n      <button \n        @click=\"testFormatting()\"\n        class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:bg-gray-50 transition-colors\"\n      >\n        <div class=\"text-center\">\n          <i class=\"fas fa-hashtag text-2xl text-purple-600 mb-4\"></i>\n          <h3 class=\"text-lg font-medium text-gray-900 mb-2\">Test Formatting</h3>\n          <p class=\"text-sm text-gray-600\">Test customer ID formatting functions</p>\n        </div>\n      </button>\n    </div>\n\n    <!-- Connection Test Results -->\n    <div x-show=\"connectionResults.length > 0\" class=\"mb-8\">\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n        <div class=\"px-6 py-4 border-b border-gray-200\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">\n            <i class=\"fas fa-network-wired mr-2 text-blue-600\"></i>\n            Connection Test Results\n          </h2>\n          <p class=\"text-sm text-gray-600 mt-1\" x-text=\"`Tested ${connectionResults.length} accounts`\"></p>\n        </div>\n        <div class=\"p-6\">\n          <div class=\"space-y-4\">\n            <template x-for=\"result in connectionResults\" :key=\"result.accountId\">\n              <div class=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                <div class=\"flex-1\">\n                  <div class=\"flex items-center\">\n                    <h4 class=\"text-sm font-medium text-gray-900\" x-text=\"result.accountName || result.formattedAccountId\"></h4>\n                    <span \n                      x-show=\"result.isTestAccount\"\n                      class=\"ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\"\n                    >\n                      <i class=\"fas fa-flask mr-1\"></i>\n                      Test\n                    </span>\n                    <span \n                      x-show=\"result.isManagerAccount\"\n                      class=\"ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n                    >\n                      <i class=\"fas fa-users mr-1\"></i>\n                      Manager\n                    </span>\n                  </div>\n                  <p class=\"text-xs text-gray-500 mt-1\">ID: <span x-text=\"result.formattedAccountId\"></span></p>\n                  <p x-show=\"result.campaignCount !== undefined\" class=\"text-xs text-gray-500\">\n                    Campaigns: <span x-text=\"result.campaignCount\"></span>\n                  </p>\n                  <p x-show=\"result.error\" class=\"text-xs text-red-600 mt-1\" x-text=\"result.error\"></p>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                  <span \n                    :class=\"{\n                      'bg-green-100 text-green-800': result.connectionStatus === 'success',\n                      'bg-red-100 text-red-800': result.connectionStatus === 'error'\n                    }\"\n                    class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium\"\n                  >\n                    <i :class=\"result.connectionStatus === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle'\" class=\"mr-1\"></i>\n                    <span x-text=\"result.connectionStatus === 'success' ? 'Connected' : 'Failed'\"></span>\n                  </span>\n                  <button \n                    @click=\"debugAccount(result.accountId)\"\n                    class=\"inline-flex items-center px-2 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50\"\n                  >\n                    <i class=\"fas fa-bug mr-1\"></i>\n                    Debug\n                  </button>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Account Debug Info -->\n    <div x-show=\"debugInfo\" class=\"mb-8\">\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n        <div class=\"px-6 py-4 border-b border-gray-200\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">\n            <i class=\"fas fa-search mr-2 text-green-600\"></i>\n            Account Debug Information\n          </h2>\n        </div>\n        <div class=\"p-6\">\n          <pre class=\"bg-gray-100 rounded-lg p-4 text-sm overflow-x-auto\" x-text=\"JSON.stringify(debugInfo, null, 2)\"></pre>\n        </div>\n      </div>\n    </div>\n\n    <!-- Formatting Test -->\n    <div x-show=\"showFormatTest\" class=\"mb-8\">\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n        <div class=\"px-6 py-4 border-b border-gray-200\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">\n            <i class=\"fas fa-hashtag mr-2 text-purple-600\"></i>\n            Customer ID Formatting Test\n          </h2>\n        </div>\n        <div class=\"p-6\">\n          <div class=\"space-y-4\">\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Enter Customer ID:</label>\n              <input \n                x-model=\"testCustomerId\"\n                type=\"text\" \n                placeholder=\"1234567890\"\n                class=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n              >\n            </div>\n            <button \n              @click=\"formatCustomerId()\"\n              class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              <i class=\"fas fa-magic mr-2\"></i>\n              Format ID\n            </button>\n            <div x-show=\"formatResult\" class=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n              <h4 class=\"text-sm font-medium text-gray-900 mb-2\">Formatting Result:</h4>\n              <div class=\"space-y-2 text-sm\">\n                <div><strong>Original:</strong> <span x-text=\"formatResult?.original\"></span></div>\n                <div><strong>Formatted:</strong> <span x-text=\"formatResult?.formatted\"></span></div>\n                <div><strong>Valid:</strong> \n                  <span \n                    :class=\"formatResult?.isValid ? 'text-green-600' : 'text-red-600'\"\n                    x-text=\"formatResult?.isValid ? 'Yes' : 'No'\"\n                  ></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Raw Data Viewer -->\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n      <div class=\"px-6 py-4 border-b border-gray-200\">\n        <h2 class=\"text-lg font-semibold text-gray-900\">\n          <i class=\"fas fa-code mr-2 text-gray-600\"></i>\n          Raw Data Viewer\n        </h2>\n      </div>\n      <div class=\"p-6\">\n        <div class=\"space-y-4\">\n          <div class=\"flex space-x-2\">\n            <button \n              @click=\"viewType = 'connections'\"\n              :class=\"viewType === 'connections' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\"\n              class=\"px-3 py-2 text-sm font-medium rounded-md\"\n            >\n              Connection Results\n            </button>\n            <button \n              @click=\"viewType = 'debug'\"\n              :class=\"viewType === 'debug' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\"\n              class=\"px-3 py-2 text-sm font-medium rounded-md\"\n            >\n              Debug Info\n            </button>\n          </div>\n          <div class=\"bg-gray-100 rounded-lg p-4\">\n            <pre \n              class=\"text-sm overflow-x-auto\"\n              x-text=\"viewType === 'connections' ? JSON.stringify(connectionResults, null, 2) : JSON.stringify(debugInfo, null, 2)\"\n            ></pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    function multiAccountTest() {\n      return {\n        loading: false,\n        connectionResults: [],\n        debugInfo: null,\n        showFormatTest: false,\n        testCustomerId: '1234567890',\n        formatResult: null,\n        viewType: 'connections',\n        \n        init() {\n          console.log('Multi-account test page loaded');\n        },\n        \n        async testConnections() {\n          this.loading = true;\n          try {\n            const response = await fetch('/test/multi-account/connection-test', {\n              headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Accept': 'application/json'\n              }\n            });\n            \n            const data = await response.json();\n            if (data.success) {\n              this.connectionResults = data.results;\n              this.showNotification(`Tested ${data.accountCount} accounts`, 'success');\n            } else {\n              this.showNotification('Failed to test connections: ' + data.message, 'error');\n            }\n          } catch (error) {\n            console.error('Error testing connections:', error);\n            this.showNotification('Failed to test connections', 'error');\n          } finally {\n            this.loading = false;\n          }\n        },\n        \n        async debugAccount(accountId) {\n          this.loading = true;\n          try {\n            const response = await fetch(`/test/multi-account/debug/${accountId}`, {\n              headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Accept': 'application/json'\n              }\n            });\n            \n            const data = await response.json();\n            if (data.success) {\n              this.debugInfo = data;\n              this.viewType = 'debug';\n              this.showNotification('Debug info loaded', 'success');\n            } else {\n              this.showNotification('Failed to load debug info: ' + data.message, 'error');\n            }\n          } catch (error) {\n            console.error('Error loading debug info:', error);\n            this.showNotification('Failed to load debug info', 'error');\n          } finally {\n            this.loading = false;\n          }\n        },\n        \n        loadAccountInfo() {\n          // Load connected accounts info from the integrations API\n          fetch('/integrations/accounts', {\n            headers: {\n              'X-Requested-With': 'XMLHttpRequest',\n              'Accept': 'application/json'\n            }\n          })\n          .then(response => response.json())\n          .then(data => {\n            if (data.success) {\n              this.debugInfo = {\n                type: 'account_list',\n                accounts: data.accounts,\n                timestamp: new Date().toISOString()\n              };\n              this.viewType = 'debug';\n              this.showNotification(`Loaded info for ${data.accounts.length} accounts`, 'success');\n            }\n          })\n          .catch(error => {\n            console.error('Error loading account info:', error);\n            this.showNotification('Failed to load account info', 'error');\n          });\n        },\n        \n        testFormatting() {\n          this.showFormatTest = true;\n          this.formatCustomerId();\n        },\n        \n        async formatCustomerId() {\n          if (!this.testCustomerId) return;\n          \n          try {\n            const response = await fetch(`/test/multi-account/format/${this.testCustomerId}`, {\n              headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Accept': 'application/json'\n              }\n            });\n            \n            const data = await response.json();\n            if (data.success) {\n              this.formatResult = data;\n            } else {\n              this.showNotification('Failed to format ID: ' + data.message, 'error');\n            }\n          } catch (error) {\n            console.error('Error formatting customer ID:', error);\n            this.showNotification('Failed to format customer ID', 'error');\n          }\n        },\n        \n        showNotification(message, type = 'info') {\n          // Create notification element\n          const notification = document.createElement('div');\n          notification.className = `fixed top-4 right-4 px-6 py-4 rounded-lg shadow-lg z-50 max-w-md transition-opacity duration-300 ${\n            type === 'success' ? 'bg-green-50 border border-green-200 text-green-800' : \n            type === 'error' ? 'bg-red-50 border border-red-200 text-red-800' : \n            'bg-blue-50 border border-blue-200 text-blue-800'\n          }`;\n          notification.innerHTML = `\n            <div class=\"flex items-center\">\n              <i class=\"fas ${\n                type === 'success' ? 'fa-check-circle text-green-600' : \n                type === 'error' ? 'fa-exclamation-circle text-red-600' : \n                'fa-info-circle text-blue-600'\n              } mr-3\" aria-hidden=\"true\"></i>\n              <span class=\"font-medium\">${message}</span>\n            </div>\n          `;\n          \n          // Add to DOM\n          document.body.appendChild(notification);\n          \n          // Auto-hide after 5 seconds\n          setTimeout(() => {\n            notification.style.transition = \"opacity 0.5s ease-out\";\n            notification.style.opacity = \"0\";\n            setTimeout(() => notification.remove(), 500);\n          }, 5000);\n        }\n      };\n    }\n  </script>\n@endslot\n@end\n