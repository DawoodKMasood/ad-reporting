@layout.app({ title: 'Integration Details' })

  @slot('main')
    <div class="max-w-7xl mx-auto py-6">
      <!-- Page Header -->
      <div class="mb-6">
        <a
          href="{{ route('integrations.index') }}"
          class="inline-flex items-center text-blue-600 hover:text-blue-800 mb-4"
        >
          <i class="fas fa-arrow-left mr-1"></i>
          Back to Integrations
      </a>
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            @!component(
            'components/platform-logo',
            { platform: connectedAccount.platform, size: 'lg' }
            )
            <div class="ml-4">
              <h1 class="text-2xl font-bold text-gray-900">
                {{ connectedAccount.accountDisplayName || (user.fullName + "'s " + (connectedAccount.platform === 'google_ads' ? 'Google Ads' : connectedAccount.platform === 'meta_ads' ? 'Meta Ads' : connectedAccount.platform === 'tiktok_ads' ? 'TikTok Ads' : connectedAccount.platform.replace('_', ' ')) + " Account") }}
                @if(connectedAccount.isManagerAccount)
                  <span
                    class="inline-flex items-center px-2 rounded-full text-xs font-medium bg-blue-100 text-blue-800 ml-1"
                  >
                    Manager
                </span>
                @end
                @if(connectedAccount.isTestAccount)
                  <span
                    class="inline-flex items-center px-2 rounded-full text-xs font-medium bg-gray-100 text-gray-700 ml-1"
                  >
                    Test Account
                </span>
                @end
              </h1>
              <p class="text-gray-600">
                ID: {{ connectedAccount.formattedAccountId || connectedAccount.accountId }}
                @if(connectedAccount.accountTimezone)
                  Â· {{ connectedAccount.accountTimezone }}
                @end
              </p>
            </div>
          </div>
          <div class="flex space-x-3">
            <button
              onclick="editAccountName('{{ connectedAccount.id }}', `{{ (connectedAccount.displayName || connectedAccount.accountName || '').replace(/`/g, '\\`') }}`)"
              data-account-id="{{ connectedAccount.id }}"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <i class="fas fa-edit mr-2"></i>
              Rename
          </button>
            <button
              onclick="syncAccount('{{ connectedAccount.id }}')"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <i class="fas fa-sync-alt mr-2"></i>
              Sync Now
          </button>
            <button
              onclick="disconnectAccount('{{ connectedAccount.id }}', '/integrations')"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              <i class="fas fa-unlink mr-2"></i>
              Disconnect
          </button>
          </div>
        </div>
      </div>

      <!-- Account Status -->
      <div class="mb-6">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-lg font-semibold text-gray-900">
                Account Status
              </h2>
              <div class="mt-2 flex items-center">
                @!component(
                'components/sync-status',
                { status: connectedAccount.isActive ? 'active' : 'inactive', lastSyncAt: connectedAccount.lastSyncAt }
                )
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-gray-500">
                Connected on
              </p>
              <p class="text-lg font-medium text-gray-900">
                {{ connectedAccount.createdAt.toFormat('LLL dd, yyyy') }}
              </p>
            </div>
          </div>
        </div>
      </div>

      @if(connectedAccount.isManagerAccount)
        <div class="mt-3 p-4 bg-blue-50 border-l-4 border-blue-400 rounded-r-lg mb-4">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <i class="fas fa-info-circle text-blue-400 text-lg"></i>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-blue-800">
                Manager Account
              </h3>
              <p class="text-sm text-blue-700 mt-1 leading-relaxed">
                This Google Ads Manager account will sync campaign data from all accessible child accounts.
              </p>
            </div>
          </div>
        </div>
      @end
      
      @if(syncIssues.isManagerWithNoChildren)
        <div class="mt-3 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded-r-lg mb-4">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <i class="fas fa-exclamation-triangle text-yellow-400 text-lg"></i>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-yellow-800">
                No Accessible Child Accounts
              </h3>
              <p class="text-sm text-yellow-700 mt-1 leading-relaxed">
                This manager account doesn't have any accessible child accounts. This could mean:
              </p>
              <ul class="text-sm text-yellow-700 mt-2 ml-4 space-y-1 list-disc">
                <li>
                  No child accounts are linked to this manager account
                </li>
                <li>
                  Child accounts don't have active campaigns
                </li>
                <li>
                  Permission is needed to access child account data
                </li>
              </ul>
              <p class="text-sm text-yellow-700 mt-2 leading-relaxed">
                Please check your Google Ads Manager account settings or contact your Google Ads representative.
              </p>
            </div>
          </div>
        </div>
      @elseif(!syncIssues.hasData && connectedAccount.lastSyncAt)
        <div class="mt-3 p-4 bg-gray-100 border-l-4 border-gray-400 rounded-r-lg mb-4">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <i class="fas fa-info-circle text-gray-400 text-lg"></i>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-gray-800">
                No Campaign Data
              </h3>
              <p class="text-sm text-gray-700 mt-1 leading-relaxed">
                No campaign data found for the last 30 days. This account may not have active campaigns with spend during this period.
              </p>
            </div>
          </div>
        </div>
      @end
      
      <!-- Sync History -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">
          <i class="fas fa-history mr-2 text-blue-600"></i>
          Sync History
        </h2>

        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Records
                </th>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Duration
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              @if(syncHistory && syncHistory.length > 0)
                @each(history in syncHistory)
                  <tr>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                      {{ history.date.toFormat('LLL dd, yyyy HH:mm') }}
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                      @if(history.status === 'completed')
                        <span
                          class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                        >
                          Completed
                      </span>
                      @elseif(history.status === 'failed')
                        <span
                          class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"
                        >
                          Failed
                      </span>
                      @elseif(history.status === 'in_progress')
                        <span
                          class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"
                        >
                          In Progress
                      </span>
                      @else
                        <span
                          class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                        >
                          {{ history.status }}
                      </span>
                      @end
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                      {{ history.records }} records
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                      {{ history.duration }}
                    </td>
                  </tr>
                @end
              @else
                <tr>
                  <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500" colspan="4">
                    No sync history available
                  </td>
                </tr>
              @end
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Rename Account Modal -->
    @!component('components/rename-account-modal', {
    id: 'renameAccountModal',
    title: 'Rename Account',
    message: 'Enter a new name for this account:',
    currentName: connectedAccount.displayName || connectedAccount.accountName || '',
    confirmButtonText: 'Rename',
    cancelButtonText: 'Cancel'
    })

    <script>
      // Auto-hide flash messages after 5 seconds
      setTimeout(() => {
        const alerts = document.querySelectorAll('[class*="fixed top-4"]');
        alerts.forEach(alert => {
          alert.style.transition = "opacity 0.5s ease-out";
          alert.style.opacity = "0";
          setTimeout(() => alert.remove(), 500);
        });
      }, 5e3);
      // Initialize rename account modal callbacks
      
      window.renameAccountModal_onConfirm = function(newName) {
        const accountId = document.querySelector('[onclick*="editAccountName"]').dataset.accountId;
        const currentName = document.querySelector("#renameAccountModal-input").dataset.currentName;
        if (newName && newName !== currentName) {
          fetch(`/integrations/${accountId}/name`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || ""
            },
            body: JSON.stringify({
              displayName: newName
            })
          }).then(response => response.json()).then(data => {
            if (data.success) {
              window.integrationManager?.showNotification("Account name updated successfully!", "success");
              setTimeout(() => {
                location.reload();
              }, 1500);
            } else {
              window.integrationManager?.showNotification("Failed to update account name: " + data.message, "error");
            }
          }).catch(error => {
            window.integrationManager?.showNotification("Failed to update account name: " + error.message, "error");
          });
        }
      };
      
      window.renameAccountModal_onCancel = function() {
        // Optional: Add any cleanup logic here if needed
      };
      // Edit account name function - shows the modal
      
      function editAccountName(accountId, currentName) {
        // Set the current name in the input field
        const input = document.getElementById("renameAccountModal-input");
        if (input) {
          input.value = currentName;
          input.dataset.currentName = currentName;
        }
        // Show the modal
        if (typeof window.renameAccountModal_show === "function") {
          window.renameAccountModal_show();
        } else {
          console.error("Rename account modal show function not found");
        }
      }
      // Sync account function
      
      function syncAccount(accountId) {
        const syncButton = document.querySelector('button[onclick*="syncAccount"]');
        const originalText = syncButton.innerHTML;
        // Show loading state
        syncButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Syncing...';
        syncButton.disabled = true;
        fetch(`/integrations/${accountId}/sync`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || ""
          }
        }).then(response => response.json()).then(data => {
          if (data.success) {
            window.integrationManager?.showNotification("Data sync completed successfully!", "success");
            setTimeout(() => {
              location.reload();
            }, 1500);
          } else {
            window.integrationManager?.showNotification("Sync failed: " + (data.message || "Unknown error"), "error");
          }
        }).catch(error => {
          window.integrationManager?.showNotification("Sync failed: " + error.message, "error");
        }).finally(() => {
          // Restore button state
          syncButton.innerHTML = originalText;
          syncButton.disabled = false;
        });
      }
      // Disconnect account function
      
      function disconnectAccount(accountId, redirectPath) {
        if (confirm("Are you sure you want to disconnect this account? All associated data will be removed.")) {
          fetch(`/integrations/${accountId}/disconnect`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || ""
            }
          }).then(response => response.json()).then(data => {
            if (data.success) {
              window.integrationManager?.showNotification("Account disconnected successfully!", "success");
              setTimeout(() => {
                window.location.href = redirectPath;
              }, 1500);
            } else {
              window.integrationManager?.showNotification("Failed to disconnect account: " + data.message, "error");
            }
          }).catch(error => {
            window.integrationManager?.showNotification("Failed to disconnect account: " + error.message, "error");
          });
        }
      }
      // Simple notification system if integrationManager is not available
      
      if (!window.integrationManager) {
        window.integrationManager = {
          showNotification: function(message, type) {
            const notification = document.createElement("div");
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 max-w-sm ${type === "success" ? "bg-green-500 text-white" : "bg-red-500 text-white"}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => {
              notification.style.transition = "opacity 0.5s ease-out";
              notification.style.opacity = "0";
              setTimeout(() => notification.remove(), 500);
            }, 5e3);
          }
        };
      }
    </script>
  @endslot
@end
