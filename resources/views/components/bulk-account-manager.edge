<!-- Bulk Account Management Component -->
<div class="space-y-6" x-data="bulkAccountManager()" x-init="init()">
  <!-- Header -->
  <div class="flex items-center justify-between">
    <div>
      <h2 class="text-lg font-semibold text-gray-900">
        <i class="fas fa-users-cog mr-2 text-blue-600"></i>
        Bulk Account Management
      </h2>
      <p class="text-sm text-gray-600 mt-1">Manage multiple Google Ads accounts simultaneously</p>
    </div>
    <div class="flex space-x-3">
      <button 
        @click="selectAll()" 
        class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
      >
        <i class="fas fa-check-square mr-2"></i>
        Select All
      </button>
      <button 
        @click="syncSelected()" 
        :disabled="selectedAccounts.length === 0 || syncing"
        class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
      >
        <i class="fas fa-sync-alt mr-2" :class="{ 'fa-spin': syncing }"></i>
        Sync Selected
      </button>
    </div>
  </div>

  <!-- Account Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" x-show="accounts.length > 0">
    <template x-for="account in accounts" :key="account.id">
      <div 
        class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 transition-all duration-200"
        :class="{ 'ring-2 ring-blue-500 border-blue-300': selectedAccounts.includes(account.id) }"
      >
        <!-- Account Header -->
        <div class="flex items-start justify-between mb-4">
          <div class="flex items-start">
            <input 
              type="checkbox" 
              :value="account.id"
              x-model="selectedAccounts"
              class="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            >
            <div class="ml-3 flex-1">
              <div class="flex items-center">
                @!component('components/platform-logo', { 
                  platform: 'google_ads', 
                  size: 'sm' 
                })
                <h3 class="ml-2 text-sm font-medium text-gray-900" x-text="account.displayName"></h3>
              </div>
              <p class="text-xs text-gray-500 mt-1" x-text="'ID: ' + account.formattedAccountId"></p>
              <div class="flex items-center mt-2 space-x-2">
                <span 
                  x-show="account.isTestAccount" 
                  class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"
                >
                  <i class="fas fa-flask mr-1"></i>
                  Test
                </span>
                <span 
                  x-show="account.isManagerAccount" 
                  class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                >
                  <i class="fas fa-users mr-1"></i>
                  Manager
                </span>
              </div>
            </div>
          </div>
          <!-- Status -->
          <div class="flex flex-col items-end">
            <span 
              :class="{
                'bg-green-100 text-green-800': account.isActive,
                'bg-red-100 text-red-800': !account.isActive
              }"
              class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium"
            >
              <i :class="account.isActive ? 'fas fa-check-circle' : 'fas fa-exclamation-circle'" class="mr-1"></i>
              <span x-text="account.isActive ? 'Active' : 'Inactive'"></span>
            </span>
            <span class="text-xs text-gray-500 mt-1" x-show="account.lastSyncAt">
              <span x-text="formatRelativeTime(account.lastSyncAt)"></span>
            </span>
          </div>
        </div>

        <!-- Account Metrics -->
        <div class="grid grid-cols-2 gap-3 mb-4" x-show="account.metrics">
          <div class="text-center p-2 bg-gray-50 rounded">
            <p class="text-xs text-gray-600">Spend</p>
            <p class="text-sm font-semibold text-gray-900" x-text="formatCurrency(account.metrics?.spend || 0)"></p>
          </div>
          <div class="text-center p-2 bg-gray-50 rounded">
            <p class="text-xs text-gray-600">Clicks</p>
            <p class="text-sm font-semibold text-gray-900" x-text="formatNumber(account.metrics?.clicks || 0)"></p>
          </div>
          <div class="text-center p-2 bg-gray-50 rounded">
            <p class="text-xs text-gray-600">CTR</p>
            <p class="text-sm font-semibold text-gray-900" x-text="formatPercentage(account.metrics?.ctr || 0)"></p>
          </div>
          <div class="text-center p-2 bg-gray-50 rounded">
            <p class="text-xs text-gray-600">Campaigns</p>
            <p class="text-sm font-semibold text-gray-900" x-text="formatNumber(account.metrics?.campaignCount || 0)"></p>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="flex space-x-2">
          <button 
            @click="syncAccount(account.id)"
            :disabled="account.syncing"
            class="flex-1 inline-flex items-center justify-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            <i class="fas fa-sync-alt mr-1" :class="{ 'fa-spin': account.syncing }"></i>
            Sync
          </button>
          <a 
            :href="'/integrations/' + account.id"
            class="flex-1 inline-flex items-center justify-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
          >
            <i class="fas fa-eye mr-1"></i>
            View
          </a>
        </div>
      </div>
    </template>
  </div>

  <!-- Loading State -->
  <div x-show="loading" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="text-center">
      <i class="fas fa-spinner fa-spin text-2xl text-gray-400 mb-4"></i>
      <p class="text-gray-500">Loading accounts...</p>
    </div>
  </div>

  <!-- Empty State -->
  <div x-show="!loading && accounts.length === 0" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="text-center">
      <i class="fas fa-users text-4xl text-gray-300 mb-4"></i>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No Connected Accounts</h3>
      <p class="text-gray-500 mb-4">Connect your Google Ads accounts to start managing them here</p>
      <a 
        href="{{ route('integrations.index') }}"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700"
      >
        <i class="fas fa-plus mr-2"></i>
        Connect Account
      </a>
    </div>
  </div>

  <!-- Bulk Actions Status -->
  <div x-show="syncResults.length > 0" class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
    <h4 class="text-sm font-medium text-gray-900 mb-3">Sync Results</h4>
    <div class="space-y-2">
      <template x-for="result in syncResults" :key="result.accountId">
        <div class="flex items-center justify-between text-sm">
          <span x-text="result.accountName"></span>
          <span 
            :class="{
              'text-green-600': result.success,
              'text-red-600': !result.success
            }"
          >
            <i :class="result.success ? 'fas fa-check-circle' : 'fas fa-exclamation-circle'" class="mr-1"></i>
            <span x-text="result.success ? 'Success' : 'Failed'"></span>
          </span>
        </div>
      </template>
    </div>
  </div>
</div>

<script>
function bulkAccountManager() {
  return {
    accounts: [],
    selectedAccounts: [],
    loading: false,
    syncing: false,
    syncResults: [],
    
    async init() {
      await this.loadAccounts();
      // Load metrics for all accounts
      await this.loadAllMetrics();
    },
    
    async loadAccounts() {
      this.loading = true;
      try {
        const response = await fetch('/integrations/accounts', {
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to load accounts');
        }
        
        const data = await response.json();
        if (data.success) {
          this.accounts = data.accounts.map(account => ({
            ...account,
            syncing: false,
            metrics: null
          }));
        }
      } catch (error) {
        console.error('Error loading accounts:', error);
        if (window.integrationManager) {
          window.integrationManager.showNotification('Failed to load accounts', 'error');
        }
      } finally {
        this.loading = false;
      }
    },
    
    async loadAllMetrics() {
      const promises = this.accounts.map(account => this.loadAccountMetrics(account.id));
      await Promise.allSettled(promises);
    },
    
    async loadAccountMetrics(accountId) {
      try {
        const response = await fetch(`/integrations/accounts/${accountId}/metrics`, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            const account = this.accounts.find(a => a.id === accountId);
            if (account) {
              account.metrics = data.metrics;
            }
          }
        }
      } catch (error) {
        console.error(`Error loading metrics for account ${accountId}:`, error);
      }
    },
    
    selectAll() {
      if (this.selectedAccounts.length === this.accounts.length) {
        this.selectedAccounts = [];
      } else {
        this.selectedAccounts = this.accounts.map(account => account.id);
      }
    },
    
    async syncAccount(accountId) {
      const account = this.accounts.find(a => a.id === accountId);
      if (!account) return;
      
      account.syncing = true;
      try {
        const response = await fetch(`/integrations/sync/${accountId}`, {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        });
        
        const data = await response.json();
        const success = response.ok && data.success;
        
        // Update sync result
        this.syncResults.push({
          accountId: account.id,
          accountName: account.displayName,
          success: success,
          message: data.message || (success ? 'Sync completed' : 'Sync failed')
        });
        
        if (success) {
          account.lastSyncAt = new Date().toISOString();
          await this.loadAccountMetrics(account.id);
        }
        
      } catch (error) {
        console.error(`Error syncing account ${accountId}:`, error);
        this.syncResults.push({
          accountId: account.id,
          accountName: account.displayName,
          success: false,
          message: error.message
        });
      } finally {
        account.syncing = false;
      }
    },
    
    async syncSelected() {
      if (this.selectedAccounts.length === 0) return;
      
      this.syncing = true;
      this.syncResults = [];
      
      // Sync accounts sequentially to avoid overwhelming the API
      for (const accountId of this.selectedAccounts) {
        await this.syncAccount(accountId);
      }
      
      this.syncing = false;
      
      if (window.integrationManager) {
        const successCount = this.syncResults.filter(r => r.success).length;
        const totalCount = this.syncResults.length;
        window.integrationManager.showNotification(
          `Sync completed: ${successCount}/${totalCount} accounts synced successfully`,
          successCount === totalCount ? 'success' : 'warning'
        );
      }
    },
    
    formatCurrency(value) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(value);
    },
    
    formatNumber(value) {
      return new Intl.NumberFormat('en-US').format(value);
    },
    
    formatPercentage(value) {
      return (value || 0).toFixed(1) + '%';
    },
    
    formatRelativeTime(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
      
      if (diffInHours < 1) return 'Just now';
      if (diffInHours < 24) return `${diffInHours}h ago`;
      const diffInDays = Math.floor(diffInHours / 24);
      if (diffInDays < 7) return `${diffInDays}d ago`;
      return date.toLocaleDateString();
    }
  };
}
</script>
