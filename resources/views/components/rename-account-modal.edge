<div id="{{ id }}" class="modal-backdrop" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9999;">
  <div class="modal-container" style="display: flex; align-items: center; justify-content: center; min-height: 100vh; padding: 1rem;">
    <div class="modal-content" style="background: white; border-radius: 0.5rem; box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); max-width: 32rem; width: 100%; margin: 1rem;">
      <div style="padding: 1.5rem;">
        <div style="display: flex; align-items: flex-start;">
          <div style="flex-shrink: 0; display: flex; align-items: center; justify-content: center; width: 3rem; height: 3rem; border-radius: 50%; background-color: #DBEAFE;">
            <i class="fas fa-edit" style="color: #3B82F6;"></i>
          </div>
          <div style="margin-left: 1rem; width: 100%;">
            <h3 style="font-size: 1.125rem; font-weight: 600; color: #111827; margin: 0 0 0.5rem 0;">
              {{ title || 'Rename Account' }}
            </h3>
            <p style="font-size: 0.875rem; color: #6B7280; margin: 0;" id="{{ id }}-description">
              {{ message || 'Enter a new name for this account:' }}
            </p>
            <div style="margin-top: 1rem;">
              <label for="{{ id }}-input" style="display: block; font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;">
                Account Name
              </label>
              <input 
                type="text" 
                id="{{ id }}-input" 
                name="accountName"
                value="{{ currentName || '' }}"
                style="width: 100%; border: 1px solid #D1D5DB; border-radius: 0.375rem; padding: 0.5rem; font-size: 0.875rem;"
                placeholder="Enter account name"
                required
              >
              <div id="{{ id }}-error" style="margin-top: 0.5rem; font-size: 0.75rem; color: #DC2626; display: none;">
                Account name cannot be empty
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color: #F9FAFB; padding: 1rem 1.5rem; display: flex; justify-content: flex-end; gap: 0.75rem; border-top: 1px solid #E5E7EB;">
        <button type="button" class="cancel-btn" style="padding: 0.5rem 1rem; border: 1px solid #D1D5DB; background: white; color: #374151; border-radius: 0.375rem; font-size: 0.875rem; cursor: pointer;">
          {{ cancelButtonText || 'Cancel' }}
        </button>
        <button type="button" class="confirm-btn" style="padding: 0.5rem 1rem; border: none; background: #3B82F6; color: white; border-radius: 0.375rem; font-size: 0.875rem; cursor: pointer;">
          {{ confirmButtonText || 'Rename' }}
        </button>
      </div>
    </div>
  </div>
</div>

<script>
(function() {
  const modal = document.getElementById('{{ id }}');
  if (!modal) {
    console.error('Modal not found:', '{{ id }}');
    return;
  }
  
  const input = document.getElementById('{{ id }}-input');
  const error = document.getElementById('{{ id }}-error');
  
  function showModal() {
    console.log('showModal called', '{{ id }}');
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // Focus the input field
    setTimeout(() => {
      if (input) input.focus();
    }, 100);
  }
  
  function hideModal() {
    modal.style.display = 'none';
    document.body.style.overflow = '';
    
    // Clear any error message
    if (error) {
      error.style.display = 'none';
    }
  }
  
  // Cancel button
  const cancelBtn = modal.querySelector('.cancel-btn');
  if (cancelBtn) {
    cancelBtn.addEventListener('click', function(e) {
      e.preventDefault();
      hideModal();
      if (typeof window['{{ id }}_onCancel'] === 'function') {
        window['{{ id }}_onCancel']();
      }
    });
  }
  
  // Confirm button
  const confirmBtn = modal.querySelector('.confirm-btn');
  if (confirmBtn) {
    confirmBtn.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Validate input
      if (!input || !input.value.trim()) {
        if (error) {
          error.style.display = 'block';
        }
        return;
      }
      
      hideModal();
      if (typeof window['{{ id }}_onConfirm'] === 'function') {
        window['{{ id }}_onConfirm'](input.value.trim());
      }
    });
  }
  
  // Handle Enter key in input
  if (input) {
    input.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        confirmBtn.click();
      }
    });
  }
  
  // Background click
  modal.addEventListener('click', function(e) {
    if (e.target === modal) {
      hideModal();
      if (typeof window['{{ id }}_onCancel'] === 'function') {
        window['{{ id }}_onCancel']();
      }
    }
  });
  
  // Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.style.display === 'block') {
      hideModal();
      if (typeof window['{{ id }}_onCancel'] === 'function') {
        window['{{ id }}_onCancel']();
      }
    }
  });
  
  // Make function globally accessible
  window['{{ id }}_show'] = showModal;
  window['{{ id }}_hide'] = hideModal;
  
  console.log('Rename modal initialized:', '{{ id }}', 'Show function:', typeof window['{{ id }}_show']);
})();
</script>